let map;
let markers = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap() {
    map = L.map('map', {
        attributionControl: false,
        zoomControl: false
    }).setView([55.751244, 37.618423], 10);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        className: 'neon-tiles',
        attribution: ''
    }).addTo(map);

    loadSubscribers();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
async function loadSubscribers() {
    try {
        const response = await fetch('/api/subscribers');
        const subscribers = await response.json();
        updateSubscriberList(subscribers);
        updateMap(subscribers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤:', error);
    }
}
function showMainPanel() {
  
document.getElementById('bsuStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
document.getElementById('bsuStatus').style.color = 'green'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—Ö–æ–¥–∞
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
function updateSubscriberList(subscribers) {
    const list = document.getElementById('subscribers');
    list.innerHTML = '';

    subscribers.forEach(sub => {
        const item = document.createElement('div');
        item.className = 'subscriber-item';
        item.innerHTML = `
            <img src="/static/icons/${sub.icon}.png" alt="${sub.icon}">
            <span>${sub.name} (${sub.id})</span>
        `;
        list.appendChild(item);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
function updateMap(subscribers) {
    Object.values(markers).forEach(marker => map.removeLayer(marker));
    markers = {};

    subscribers.forEach(sub => {
        const marker = L.marker([sub.lat, sub.lon], {
            icon: createNeonIcon(sub.icon)
        }).bindPopup(`–ê–±–æ–Ω–µ–Ω—Ç: ${sub.name}<br>ID: ${sub.id}`)
          .addTo(map);
        markers[sub.id] = marker;
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
function createNeonIcon(iconType) {
    return L.divIcon({
        className: 'neon-marker',
        html: `<img src="/icons/${iconType}.png" alt="${iconType}" class="marker-icon">`,
        iconSize: [30, 30]
    });
}
async function connectToBSU() {
    const ip = document.getElementById('bsuIp').value || '10.21.50.5';
    const port = document.getElementById('bsuPort').value || 2323;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    const dispatcherId = prompt('–í–≤–µ–¥–∏—Ç–µ ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞:');
    if (!dispatcherId) {
        alert('ID –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }

    try {
        const response = await fetch(`http://${ip}:${port}/api/connect`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ dispatcherId })
        });
        
        if (response.ok) {
            bsuConnected = true;
            currentDispatcherId = dispatcherId;
            document.getElementById('bsuStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            document.getElementById('bsuStatus').style.color = 'green';
            showMainPanel(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
            loadGroups(); 
        } else {
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–°–£');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–æ–Ω–µ–Ω—Ç–∞
async function addSubscriber() {
    const subId = document.getElementById('subId').value;
    const subName = document.getElementById('subName').value;
    const icon = document.querySelector('input[name="icon"]:checked').value;

    if (!subId || !subName) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    const newSub = {
        id: subId,
        name: subName,
        icon: icon,
        lat: 55.751244 + (Math.random() - 0.5) * 0.1,
        lon: 37.618423 + (Math.random() - 0.5) * 0.1,
        status: 'active'
    };

    try {
        const response = await fetch('/api/subscribers', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(newSub)
        });
        
        if (response.ok) {
            alert('–ê–±–æ–Ω–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
            loadSubscribers();
            closeModal();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–±–æ–Ω–µ–Ω—Ç–∞');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–°–£


// app.js
let bsuConnected = false;
let currentDispatcherId = null;

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function showConnectModal() {
    document.getElementById('connectModal').style.display = 'block';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —Ñ—É–Ω–∫—Ü–∏—é connectToBSU()
// –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é:

async function connectToBSU() {
    const ip = document.getElementById('bsuIp').value;
    const port = document.getElementById('bsuPort').value;
    const dispatcherId = document.getElementById('dispatcherId').value;

    try {
        const response = await fetch('/api/connect-bsu', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({ ip, port, dispatcherId })
        });
        
        if (response.ok) {
            const data = await response.json();
            currentDispatcherId = data.dispatcherId;
            updateConnectionStatus(true);
            loadGroups();
            showMainPanel();
        } else {
            alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + await response.text());
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        updateConnectionStatus(false);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(isConnected) {
    const statusElement = document.getElementById('connectionStatus');
    statusElement.textContent = isConnected ? "–°—Ç–∞—Ç—É—Å: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ";
    statusElement.style.color = isConnected ? "#00ff00" : "#ff0000";
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initMap();
    document.getElementById('loginPanel').style.display = 'none';
    showConnectModal();
});

function showMainPanel() {
    document.getElementById('mainPanel').style.display = 'block';
    document.getElementById('loginPanel').style.display = 'none';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø


// –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–°–£
async function loadGroups() {
    if (!bsuConnected) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ë–°–£');
        return;
    }

    try {
        const response = await fetch(`/api/dispatchers/${currentDispatcherId}/groups`);
        const groups = await response.json();
        renderGroups(groups);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø
function renderGroups(groups) {
    const container = document.getElementById('groupsContainer');
    container.innerHTML = '';

    groups.forEach(group => {
        const panel = document.createElement('div');
        panel.className = 'group-panel';
        panel.innerHTML = `
            <h4>${group.name}</h4>
            <button class="ptt-button" onclick="startCall('${group.id}')">PTT</button>
            <button class="message-button" onclick="sendMessage('${group.id}')">‚úâÔ∏è</button>
            <button class="mute-button" onclick="toggleMute('${group.id}')">üîá</button>
        `;
        container.appendChild(panel);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–∑–æ–≤–∞
function startCall(groupId) {
    console.log(`–ù–∞—á–∞–ª–æ –≤—ã–∑–æ–≤–∞ –≥—Ä—É–ø–ø—ã ${groupId}`);
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∞ –ø–æ DMR
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendMessage(groupId) {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ ${groupId}`);
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
}

// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
function toggleMute(groupId) {
    console.log(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –≥—Ä—É–ø–ø—ã ${groupId}`);
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º
}
// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø
function renderGroups(groups) {
    const container = document.getElementById('groupsContainer');
    container.innerHTML = '';

    groups.forEach(group => {
        const panel = document.createElement('div');
        panel.className = 'group-panel';
        panel.innerHTML = `
            <h4>${group.name}</h4>
            <button class="ptt-button">PTT</button>
            <button class="message-button">‚úâÔ∏è</button>
            <button class="mute-button">üîá</button>
        `;
        container.appendChild(panel);
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    document.getElementById('addSubscriberModal').style.display = 'none';
    document.getElementById('settingsModal').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function showAddForm() {
    document.getElementById('addSubscriberModal').style.display = 'flex';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
function showSettings() {
    document.getElementById('settingsModal').style.display = 'flex';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    const ip = document.getElementById('bsuIp').value;
    const port = document.getElementById('bsuPort').value;

    if (!ip || !port) {
        alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    localStorage.setItem('bsuSettings', JSON.stringify({ ip, port }));
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    closeModal();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initMap();
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–°–£


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(isConnected) {
    const statusElement = document.getElementById('connectionStatus');
    statusElement.textContent = isConnected ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ";
    statusElement.style.color = isConnected ? "#00ff00" : "#ff0000";
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
async function loadDispatcherList() {
    try {
        const response = await fetch('/api/dispatchers');
        const dispatchers = await response.json();
        renderDispatchers(dispatchers);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤:', error);
    }
}